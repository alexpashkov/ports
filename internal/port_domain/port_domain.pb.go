// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: port_domain.proto

package port_domain

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Port struct {
	Name        string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	City        string    `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	Country     string    `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Alias       []string  `protobuf:"bytes,4,rep,name=alias,proto3" json:"alias,omitempty"`
	Regions     []string  `protobuf:"bytes,5,rep,name=regions,proto3" json:"regions,omitempty"`
	Coordinates []float32 `protobuf:"fixed32,6,rep,packed,name=coordinates,proto3" json:"coordinates,omitempty"`
	Province    string    `protobuf:"bytes,7,opt,name=province,proto3" json:"province,omitempty"`
	Timezone    string    `protobuf:"bytes,8,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Unlocs      []string  `protobuf:"bytes,9,rep,name=unlocs,proto3" json:"unlocs,omitempty"`
	Code        string    `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *Port) Reset()      { *m = Port{} }
func (*Port) ProtoMessage() {}
func (*Port) Descriptor() ([]byte, []int) {
	return fileDescriptor_007aef8a9ab4dcdc, []int{0}
}
func (m *Port) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Port) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Port.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Port) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Port.Merge(m, src)
}
func (m *Port) XXX_Size() int {
	return m.Size()
}
func (m *Port) XXX_DiscardUnknown() {
	xxx_messageInfo_Port.DiscardUnknown(m)
}

var xxx_messageInfo_Port proto.InternalMessageInfo

func (m *Port) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Port) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Port) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Port) GetAlias() []string {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *Port) GetRegions() []string {
	if m != nil {
		return m.Regions
	}
	return nil
}

func (m *Port) GetCoordinates() []float32 {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *Port) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *Port) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *Port) GetUnlocs() []string {
	if m != nil {
		return m.Unlocs
	}
	return nil
}

func (m *Port) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type UpsertPortResponse struct {
}

func (m *UpsertPortResponse) Reset()      { *m = UpsertPortResponse{} }
func (*UpsertPortResponse) ProtoMessage() {}
func (*UpsertPortResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_007aef8a9ab4dcdc, []int{1}
}
func (m *UpsertPortResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertPortResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertPortResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertPortResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertPortResponse.Merge(m, src)
}
func (m *UpsertPortResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertPortResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertPortResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertPortResponse proto.InternalMessageInfo

type GetPortRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetPortRequest) Reset()      { *m = GetPortRequest{} }
func (*GetPortRequest) ProtoMessage() {}
func (*GetPortRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_007aef8a9ab4dcdc, []int{2}
}
func (m *GetPortRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPortRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPortRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPortRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPortRequest.Merge(m, src)
}
func (m *GetPortRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPortRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPortRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPortRequest proto.InternalMessageInfo

func (m *GetPortRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetPortResponse struct {
	Port *Port `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *GetPortResponse) Reset()      { *m = GetPortResponse{} }
func (*GetPortResponse) ProtoMessage() {}
func (*GetPortResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_007aef8a9ab4dcdc, []int{3}
}
func (m *GetPortResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPortResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPortResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPortResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPortResponse.Merge(m, src)
}
func (m *GetPortResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPortResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPortResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPortResponse proto.InternalMessageInfo

func (m *GetPortResponse) GetPort() *Port {
	if m != nil {
		return m.Port
	}
	return nil
}

func init() {
	proto.RegisterType((*Port)(nil), "Port")
	golang_proto.RegisterType((*Port)(nil), "Port")
	proto.RegisterType((*UpsertPortResponse)(nil), "UpsertPortResponse")
	golang_proto.RegisterType((*UpsertPortResponse)(nil), "UpsertPortResponse")
	proto.RegisterType((*GetPortRequest)(nil), "GetPortRequest")
	golang_proto.RegisterType((*GetPortRequest)(nil), "GetPortRequest")
	proto.RegisterType((*GetPortResponse)(nil), "GetPortResponse")
	golang_proto.RegisterType((*GetPortResponse)(nil), "GetPortResponse")
}

func init() { proto.RegisterFile("port_domain.proto", fileDescriptor_007aef8a9ab4dcdc) }
func init() { golang_proto.RegisterFile("port_domain.proto", fileDescriptor_007aef8a9ab4dcdc) }

var fileDescriptor_007aef8a9ab4dcdc = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xbd, 0x6e, 0xdb, 0x30,
	0x14, 0x85, 0x49, 0x59, 0xfe, 0xbb, 0x46, 0xed, 0x96, 0x35, 0x0a, 0xd6, 0x03, 0x21, 0x68, 0x32,
	0x8a, 0x42, 0x83, 0x3b, 0x76, 0x2b, 0x0a, 0x78, 0x2d, 0x04, 0x74, 0xe9, 0x52, 0xa8, 0x12, 0xd1,
	0x10, 0xb0, 0x49, 0x85, 0xa4, 0x03, 0x38, 0x53, 0x1e, 0x21, 0x8f, 0x91, 0xc7, 0xc8, 0x98, 0xd1,
	0xa3, 0xc7, 0x58, 0x5a, 0x32, 0xfa, 0x09, 0x82, 0x40, 0x94, 0xec, 0x38, 0x41, 0x36, 0x9e, 0xef,
	0x1e, 0xe2, 0x5c, 0x1e, 0x10, 0x3e, 0xe4, 0x4a, 0xdb, 0xbf, 0x99, 0x5a, 0x26, 0x42, 0x46, 0xb9,
	0x56, 0x56, 0x85, 0x8f, 0x18, 0xfc, 0x5f, 0x4a, 0x5b, 0x42, 0xc0, 0x97, 0xc9, 0x92, 0x53, 0x1c,
	0xe0, 0x69, 0x3f, 0x76, 0xe7, 0x8a, 0xa5, 0xc2, 0xae, 0xa9, 0x57, 0xb3, 0xea, 0x4c, 0x28, 0x74,
	0x53, 0xb5, 0x92, 0x56, 0xaf, 0x69, 0xcb, 0xe1, 0x83, 0x24, 0x63, 0x68, 0x27, 0x0b, 0x91, 0x18,
	0xea, 0x07, 0xad, 0x69, 0x3f, 0xae, 0x45, 0xe5, 0xd7, 0xfc, 0xbf, 0x50, 0xd2, 0xd0, 0xb6, 0xe3,
	0x07, 0x49, 0x02, 0x18, 0xa4, 0x4a, 0xe9, 0x4c, 0xc8, 0xc4, 0x72, 0x43, 0x3b, 0x41, 0x6b, 0xea,
	0xc5, 0xa7, 0x88, 0x4c, 0xa0, 0x97, 0x6b, 0x75, 0x21, 0x64, 0xca, 0x69, 0xd7, 0x85, 0x1d, 0x75,
	0x35, 0xb3, 0x62, 0xc9, 0x2f, 0x95, 0xe4, 0xb4, 0x57, 0xcf, 0x0e, 0x9a, 0x7c, 0x82, 0xce, 0x4a,
	0x2e, 0x54, 0x6a, 0x68, 0xdf, 0x45, 0x36, 0xca, 0xbd, 0x47, 0x65, 0x9c, 0x42, 0xf3, 0x1e, 0x95,
	0xf1, 0x70, 0x0c, 0xe4, 0x77, 0x6e, 0xb8, 0xb6, 0x55, 0x0b, 0x31, 0x37, 0xb9, 0x92, 0x86, 0x87,
	0x01, 0x0c, 0xe7, 0xbc, 0x41, 0xe7, 0x2b, 0x6e, 0x2c, 0x19, 0x82, 0x27, 0xb2, 0xa6, 0x1d, 0x4f,
	0x64, 0xe1, 0x57, 0x18, 0x1d, 0x1d, 0xf5, 0x25, 0xf2, 0x19, 0xfc, 0xaa, 0x60, 0x67, 0x1a, 0xcc,
	0xda, 0x91, 0x1b, 0x3a, 0x34, 0x3b, 0x03, 0xa8, 0xd4, 0x4f, 0x57, 0x3d, 0xf9, 0x02, 0xf0, 0x9c,
	0x49, 0x6a, 0xe3, 0xe4, 0x63, 0xf4, 0xc6, 0x1e, 0x88, 0x44, 0xd0, 0x6d, 0x72, 0xc8, 0x28, 0x7a,
	0xb9, 0xd3, 0xe4, 0x7d, 0xf4, 0x6a, 0x85, 0x10, 0xfd, 0x98, 0x6f, 0x76, 0x0c, 0x6d, 0x77, 0x0c,
	0xed, 0x77, 0x0c, 0x5f, 0x15, 0x0c, 0xdf, 0x14, 0x0c, 0xdf, 0x15, 0x0c, 0x6f, 0x0a, 0x86, 0xef,
	0x0b, 0x86, 0x1f, 0x0a, 0x86, 0xf6, 0x05, 0xc3, 0xd7, 0x25, 0x43, 0xb7, 0x25, 0xc3, 0x9b, 0x92,
	0xa1, 0x6d, 0xc9, 0xd0, 0x9f, 0x77, 0xd1, 0xf7, 0x93, 0xff, 0xf1, 0xaf, 0xe3, 0x3e, 0xc8, 0xb7,
	0xa7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xee, 0x71, 0x4b, 0x1a, 0x35, 0x02, 0x00, 0x00,
}

func (this *Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Port)
	if !ok {
		that2, ok := that.(Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.City != that1.City {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if len(this.Alias) != len(that1.Alias) {
		return false
	}
	for i := range this.Alias {
		if this.Alias[i] != that1.Alias[i] {
			return false
		}
	}
	if len(this.Regions) != len(that1.Regions) {
		return false
	}
	for i := range this.Regions {
		if this.Regions[i] != that1.Regions[i] {
			return false
		}
	}
	if len(this.Coordinates) != len(that1.Coordinates) {
		return false
	}
	for i := range this.Coordinates {
		if this.Coordinates[i] != that1.Coordinates[i] {
			return false
		}
	}
	if this.Province != that1.Province {
		return false
	}
	if this.Timezone != that1.Timezone {
		return false
	}
	if len(this.Unlocs) != len(that1.Unlocs) {
		return false
	}
	for i := range this.Unlocs {
		if this.Unlocs[i] != that1.Unlocs[i] {
			return false
		}
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *UpsertPortResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertPortResponse)
	if !ok {
		that2, ok := that.(UpsertPortResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetPortRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPortRequest)
	if !ok {
		that2, ok := that.(GetPortRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GetPortResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPortResponse)
	if !ok {
		that2, ok := that.(GetPortResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Port.Equal(that1.Port) {
		return false
	}
	return true
}
func (this *Port) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&port_domain.Port{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Alias: "+fmt.Sprintf("%#v", this.Alias)+",\n")
	s = append(s, "Regions: "+fmt.Sprintf("%#v", this.Regions)+",\n")
	s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	s = append(s, "Province: "+fmt.Sprintf("%#v", this.Province)+",\n")
	s = append(s, "Timezone: "+fmt.Sprintf("%#v", this.Timezone)+",\n")
	s = append(s, "Unlocs: "+fmt.Sprintf("%#v", this.Unlocs)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertPortResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&port_domain.UpsertPortResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPortRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&port_domain.GetPortRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPortResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&port_domain.GetPortResponse{")
	if this.Port != nil {
		s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPortDomain(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PortDomainClient is the client API for PortDomain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PortDomainClient interface {
	UpsertPort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*UpsertPortResponse, error)
	GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*GetPortResponse, error)
}

type portDomainClient struct {
	cc *grpc.ClientConn
}

func NewPortDomainClient(cc *grpc.ClientConn) PortDomainClient {
	return &portDomainClient{cc}
}

func (c *portDomainClient) UpsertPort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*UpsertPortResponse, error) {
	out := new(UpsertPortResponse)
	err := c.cc.Invoke(ctx, "/PortDomain/UpsertPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portDomainClient) GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*GetPortResponse, error) {
	out := new(GetPortResponse)
	err := c.cc.Invoke(ctx, "/PortDomain/GetPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortDomainServer is the server API for PortDomain service.
type PortDomainServer interface {
	UpsertPort(context.Context, *Port) (*UpsertPortResponse, error)
	GetPort(context.Context, *GetPortRequest) (*GetPortResponse, error)
}

// UnimplementedPortDomainServer can be embedded to have forward compatible implementations.
type UnimplementedPortDomainServer struct {
}

func (*UnimplementedPortDomainServer) UpsertPort(ctx context.Context, req *Port) (*UpsertPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertPort not implemented")
}
func (*UnimplementedPortDomainServer) GetPort(ctx context.Context, req *GetPortRequest) (*GetPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPort not implemented")
}

func RegisterPortDomainServer(s *grpc.Server, srv PortDomainServer) {
	s.RegisterService(&_PortDomain_serviceDesc, srv)
}

func _PortDomain_UpsertPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortDomainServer).UpsertPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PortDomain/UpsertPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortDomainServer).UpsertPort(ctx, req.(*Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortDomain_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortDomainServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PortDomain/GetPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortDomainServer).GetPort(ctx, req.(*GetPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortDomain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PortDomain",
	HandlerType: (*PortDomainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertPort",
			Handler:    _PortDomain_UpsertPort_Handler,
		},
		{
			MethodName: "GetPort",
			Handler:    _PortDomain_GetPort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "port_domain.proto",
}

func (m *Port) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Port) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Port) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintPortDomain(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Unlocs) > 0 {
		for iNdEx := len(m.Unlocs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Unlocs[iNdEx])
			copy(dAtA[i:], m.Unlocs[iNdEx])
			i = encodeVarintPortDomain(dAtA, i, uint64(len(m.Unlocs[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Timezone) > 0 {
		i -= len(m.Timezone)
		copy(dAtA[i:], m.Timezone)
		i = encodeVarintPortDomain(dAtA, i, uint64(len(m.Timezone)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Province) > 0 {
		i -= len(m.Province)
		copy(dAtA[i:], m.Province)
		i = encodeVarintPortDomain(dAtA, i, uint64(len(m.Province)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Coordinates) > 0 {
		for iNdEx := len(m.Coordinates) - 1; iNdEx >= 0; iNdEx-- {
			f1 := math.Float32bits(float32(m.Coordinates[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f1))
		}
		i = encodeVarintPortDomain(dAtA, i, uint64(len(m.Coordinates)*4))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Regions) > 0 {
		for iNdEx := len(m.Regions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Regions[iNdEx])
			copy(dAtA[i:], m.Regions[iNdEx])
			i = encodeVarintPortDomain(dAtA, i, uint64(len(m.Regions[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Alias) > 0 {
		for iNdEx := len(m.Alias) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Alias[iNdEx])
			copy(dAtA[i:], m.Alias[iNdEx])
			i = encodeVarintPortDomain(dAtA, i, uint64(len(m.Alias[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintPortDomain(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintPortDomain(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPortDomain(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertPortResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertPortResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertPortResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetPortRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPortRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPortRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPortDomain(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPortResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPortResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPortResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != nil {
		{
			size, err := m.Port.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPortDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPortDomain(dAtA []byte, offset int, v uint64) int {
	offset -= sovPortDomain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Port) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPortDomain(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovPortDomain(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovPortDomain(uint64(l))
	}
	if len(m.Alias) > 0 {
		for _, s := range m.Alias {
			l = len(s)
			n += 1 + l + sovPortDomain(uint64(l))
		}
	}
	if len(m.Regions) > 0 {
		for _, s := range m.Regions {
			l = len(s)
			n += 1 + l + sovPortDomain(uint64(l))
		}
	}
	if len(m.Coordinates) > 0 {
		n += 1 + sovPortDomain(uint64(len(m.Coordinates)*4)) + len(m.Coordinates)*4
	}
	l = len(m.Province)
	if l > 0 {
		n += 1 + l + sovPortDomain(uint64(l))
	}
	l = len(m.Timezone)
	if l > 0 {
		n += 1 + l + sovPortDomain(uint64(l))
	}
	if len(m.Unlocs) > 0 {
		for _, s := range m.Unlocs {
			l = len(s)
			n += 1 + l + sovPortDomain(uint64(l))
		}
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovPortDomain(uint64(l))
	}
	return n
}

func (m *UpsertPortResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetPortRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPortDomain(uint64(l))
	}
	return n
}

func (m *GetPortResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != nil {
		l = m.Port.Size()
		n += 1 + l + sovPortDomain(uint64(l))
	}
	return n
}

func sovPortDomain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPortDomain(x uint64) (n int) {
	return sovPortDomain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Port) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Port{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Alias:` + fmt.Sprintf("%v", this.Alias) + `,`,
		`Regions:` + fmt.Sprintf("%v", this.Regions) + `,`,
		`Coordinates:` + fmt.Sprintf("%v", this.Coordinates) + `,`,
		`Province:` + fmt.Sprintf("%v", this.Province) + `,`,
		`Timezone:` + fmt.Sprintf("%v", this.Timezone) + `,`,
		`Unlocs:` + fmt.Sprintf("%v", this.Unlocs) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertPortResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertPortResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetPortRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPortRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPortResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPortResponse{`,
		`Port:` + strings.Replace(this.Port.String(), "Port", "Port", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPortDomain(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Port) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPortDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Port: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Port: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPortDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPortDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPortDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPortDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPortDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPortDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPortDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPortDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = append(m.Alias, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPortDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPortDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Regions = append(m.Regions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Coordinates = append(m.Coordinates, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPortDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPortDomain
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPortDomain
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Coordinates) == 0 {
					m.Coordinates = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Coordinates = append(m.Coordinates, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPortDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPortDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Province = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPortDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPortDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlocs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPortDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPortDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unlocs = append(m.Unlocs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPortDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPortDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPortDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPortDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPortDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertPortResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPortDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertPortResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertPortResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPortDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPortDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPortDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPortRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPortDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPortRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPortRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPortDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPortDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPortDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPortDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPortDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPortResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPortDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPortResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPortResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPortDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPortDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Port == nil {
				m.Port = &Port{}
			}
			if err := m.Port.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPortDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPortDomain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPortDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPortDomain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPortDomain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPortDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPortDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPortDomain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPortDomain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPortDomain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPortDomain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPortDomain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPortDomain = fmt.Errorf("proto: unexpected end of group")
)
